#!/usr/bin/env python

"""The clang static analyzer results viewer.
"""

import sys
import thread
import time
import urllib
import webbrowser

# How long to wait for server to start.
kSleepTimeout = .05
kMaxSleeps = 100

# Default server parameters

kDefaultHost = 'localhost'
kDefaultPort = 8181

###

def url_is_up(url):
    try:
        o = urllib.urlopen(url)
    except IOError:
        return False
    o.close()
    return True

def start_browser(options):
    import urllib, webbrowser

    url = 'http://%s:%d'%(options.host, options.port)
    
    # Wait for server to start...
    if options.debug:
        sys.stderr.write('%s: Waiting for server.' % sys.argv[0])
        sys.stderr.flush()
    for i in range(kMaxSleeps):
        if url_is_up(url):
            break
        if options.debug:
            sys.stderr.write('.')
            sys.stderr.flush()
        time.sleep(kSleepTimeout)
    else:
        print >>sys.stderr,'WARNING: Unable to detect that server started.'

    if options.debug:
        print >>sys.stderr,'%s: Starting webbrowser...' % sys.argv[0]
    webbrowser.open(url)

def run(options, root):
    import ScanView
    try:
        if options.debug:
            print >>sys.stderr,'%s: SERVER: starting %s:%d'%(sys.argv[0],
                                                             options.host,
                                                             options.port)
        httpd = ScanView.create_server(options, root)
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

def  main():    
    from optparse import OptionParser
    parser = OptionParser('usage: %prog [options] <results directory>')
    parser.set_description(__doc__)
    parser.add_option(
        '--host', dest="host", default=kDefaultHost, type="string",
        help="Host interface to listen on. (default=%s)" % kDefaultHost)
    parser.add_option(
        '--port', dest="port", default=kDefaultPort, type="int",
        help="Port to listen on. (default=%s)" % kDefaultPort)
    parser.add_option("--debug", dest="debug", default=0, 
                      action="count",
                      help="Print additional debugging information.")
    parser.add_option("--auto-reload", dest="autoReload", default=False, 
                      action="store_true",
                      help="Automatically update module for each request.")
    parser.add_option("--no-browser", dest="startBrowser", default=True, 
                      action="store_false",
                      help="Don't open a webbrowser on startup.")
    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.error('invalid number of arguments.')
    root, = args

    # Kick off thread to wait for server and start web browser, if
    # requested.
    if options.startBrowser:
        t = thread.start_new_thread(start_browser, (options,))

    run(options, root)

if __name__ == '__main__':
    main()
