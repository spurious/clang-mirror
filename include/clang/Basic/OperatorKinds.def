//===--- OperatorKinds.def - C++ Overloaded Operator Database ---*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the OverloadedOperator database, which includes
// all of the overloadable C++ operators.
//
//===----------------------------------------------------------------------===//
//
/// @file OperatorKinds.def
///
/// In this file, each of the overloadable C++ operators is enumerated
/// with either the OVERLOADED_OPERATOR or OVERLOADED_OPERATOR_MULTI
/// macro, each of which can be specified by the code including this
/// file. OVERLOADED_OPERATOR is used for single-token operators
/// (e.g., "+"), and has six arguments:
///
/// Name: The name of the token. OO_Name will be the name of the
/// corresponding enumerator in OverloadedOperatorKind in
/// OperatorKinds.h.
///
/// Spelling: A string that provides a canonical spelling for the
/// operator, e.g., "operator+".
///
/// Token: The name of the token that specifies the operator, e.g.,
/// "plus" for operator+ or "greatergreaterequal" for
/// "operator>>=". With a "kw_" prefix, the token name can be used as
/// an enumerator into the TokenKind enumeration.
///
/// Unary: True if the operator can be declared as a unary operator.
///
/// Binary: True if the operator can be declared as a binary
/// operator. Note that some operators (e.g., "operator+" and
/// "operator*") can be both unary and binary.
///
/// MemberOnly: True if this operator can only be declared as a
/// non-static member function. False if the operator can be both a
/// non-member function and a non-static member function.
///
/// OVERLOADED_OPERATOR_MULTI is used to enumerate the multi-token
/// overloaded operator names, e.g., "operator delete []". The macro
/// has all of the parameters of OVERLOADED_OPERATOR except Token,
/// which is omitted.

#ifndef OVERLOADED_OPERATOR
#  define OVERLOADED_OPERATOR(Name,Spelling,Token,Unary,Binary,MemberOnly)
#endif

#ifndef OVERLOADED_OPERATOR_MULTI
#  define OVERLOADED_OPERATOR_MULTI(Name,Spelling,Unary,Binary,MemberOnly) \
    OVERLOADED_OPERATOR(Name,Spelling,unknown,Unary,Binary,MemberOnly)
#endif

OVERLOADED_OPERATOR_MULTI(New            , "operator new"                     , true , true , false)
OVERLOADED_OPERATOR_MULTI(Delete         , "operator delete"                  , true , true , false)
OVERLOADED_OPERATOR_MULTI(Array_New      , "operator new[]"                   , true , true , false)
OVERLOADED_OPERATOR_MULTI(Array_Delete   , "operator delete[]"                , true , true , false)
OVERLOADED_OPERATOR(Plus                 , "operator+"   , plus               , true , true , false)
OVERLOADED_OPERATOR(Minus                , "operator-"   , minus              , true , true , false)
OVERLOADED_OPERATOR(Star                 , "operator*"   , star               , true , true , false)
OVERLOADED_OPERATOR(Slash                , "operator/"   , slash              , false, true , false)
OVERLOADED_OPERATOR(Percent              , "operator%"   , percent            , false, true , false)
OVERLOADED_OPERATOR(Caret                , "operator^"   , caret              , false, true , false)
OVERLOADED_OPERATOR(Amp                  , "operator&"   , amp                , true , true , false)
OVERLOADED_OPERATOR(Pipe                 , "operator|"   , pipe               , false, true , false)
OVERLOADED_OPERATOR(Tilde                , "operator~"   , tilde              , true , false, false)
OVERLOADED_OPERATOR(Exclaim              , "operator!"   , exclaim            , true , false, false)
OVERLOADED_OPERATOR(Equal                , "operator="   , equal              , false, true , true)
OVERLOADED_OPERATOR(Less                 , "operator<"   , less               , false, true , false)
OVERLOADED_OPERATOR(Greater              , "operator>"   , greater            , false, true , false)
OVERLOADED_OPERATOR(PlusEqual            , "operator+="  , plusequal          , false, true , false)
OVERLOADED_OPERATOR(MinusEqual           , "operator-="  , minusequal         , false, true , false)
OVERLOADED_OPERATOR(StarEqual            , "operator*="  , starequal          , false, true , false)
OVERLOADED_OPERATOR(SlashEqual           , "operator/="  , slashequal         , false, true , false)
OVERLOADED_OPERATOR(PercentEqual         , "operator%="  , percentequal       , false, true , false)
OVERLOADED_OPERATOR(CaretEqual           , "operator^="  , caretequal         , false, true , false)
OVERLOADED_OPERATOR(AmpEqual             , "operator&="  , ampequal           , false, true , false)
OVERLOADED_OPERATOR(PipeEqual            , "operator|="  , pipeequal          , false, true , false)
OVERLOADED_OPERATOR(LessLess             , "operator<<"  , lessless           , false, true , false)
OVERLOADED_OPERATOR(GreaterGreater       , "operator>>"  , greatergreater     , false, true , false)
OVERLOADED_OPERATOR(LessLessEqual        , "operator<<=" , lesslessequal      , false, true , false)
OVERLOADED_OPERATOR(GreaterGreaterEqual  , "operator>>=" , greatergreaterequal, false, true , false)
OVERLOADED_OPERATOR(EqualEqual           , "operator=="  , equalequal         , false, true , false)
OVERLOADED_OPERATOR(ExclaimEqual         , "operator!="  , exclaimequal       , false, true , false)
OVERLOADED_OPERATOR(LessEqual            , "operator<="  , lessequal          , false, true , false)
OVERLOADED_OPERATOR(GreaterEqual         , "operator>="  , greaterequal       , false, true , false)
OVERLOADED_OPERATOR(AmpAmp               , "operator&&"  , ampamp             , false, true , false)
OVERLOADED_OPERATOR(PipePipe             , "operator||"  , pipepipe           , false, true , false)
OVERLOADED_OPERATOR(PlusPlus             , "operator++"  , plusplus           , true , true , false)
OVERLOADED_OPERATOR(MinusMinus           , "operator--"  , minusminus         , true , true , false)
OVERLOADED_OPERATOR(Comma                , "operator,"   , comma              , false, true , false)
OVERLOADED_OPERATOR(ArrowStar            , "operator->*" , arrowstar          , false, true , false)
OVERLOADED_OPERATOR(Arrow                , "operator->"  , arrow              , true , false, true)
OVERLOADED_OPERATOR_MULTI(Call           , "operator()"                       , true , true , true)
OVERLOADED_OPERATOR_MULTI(Subscript      , "operator[]"                       , false, true , true)

#undef OVERLOADED_OPERATOR_MULTI
#undef OVERLOADED_OPERATOR
